# ============================================
# Billor Backend - Production Configuration
# ============================================
# This is an EXAMPLE for production deployment
# DO NOT use these exact values in production!
# ============================================

# --------------------------------------------
# Application Settings
# --------------------------------------------
PORT=3000
NODE_ENV=production

# --------------------------------------------
# Security (REQUIRED)
# --------------------------------------------
# Generate with: openssl rand -base64 32
# Example: xK9mP2vN8qR5tY7wZ3aB6cD1eF4gH0jL
JWT_SECRET=REPLACE_WITH_STRONG_RANDOM_SECRET

# --------------------------------------------
# Database - PostgreSQL (REQUIRED)
# --------------------------------------------
# Use managed database service (AWS RDS, GCP Cloud SQL, etc.)
# Enable SSL: ?sslmode=require
DATABASE_URL=postgresql://username:password@db-host:5432/billor?schema=public&sslmode=require

# --------------------------------------------
# Cache - Redis (REQUIRED)
# --------------------------------------------
# Use managed Redis (AWS ElastiCache, Redis Cloud, etc.)
# Enable TLS: rediss:// (note the double 's')
REDIS_URL=rediss://username:password@redis-host:6380

# --------------------------------------------
# Audit Storage - MongoDB (REQUIRED)
# --------------------------------------------
# Use MongoDB Atlas or managed service
# Connection string with authentication and SSL
MONGO_URL=mongodb+srv://username:password@cluster.mongodb.net/?retryWrites=true&w=majority
MONGO_DB=billor_audit_prod

# --------------------------------------------
# Messaging - Google Cloud Pub/Sub (REQUIRED)
# --------------------------------------------
# Real GCP project ID
PUBSUB_PROJECT_ID=your-gcp-project-id

# DO NOT set PUBSUB_EMULATOR_HOST in production
# PUBSUB_EMULATOR_HOST should be commented out or removed

# ============================================
# Additional Production Considerations
# ============================================
# 1. Use secret management (AWS Secrets Manager, GCP Secret Manager, etc.)
# 2. Enable monitoring and logging
# 3. Set up alerts for errors and performance
# 4. Use connection pooling for databases
# 5. Enable rate limiting
# 6. Set up backup and disaster recovery
# 7. Use CDN for static assets
# 8. Enable CORS only for trusted domains
# ============================================
